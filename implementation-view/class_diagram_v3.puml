@startuml



package Repository {
    interface ArtifactRepository
    Models.Artifact <.. ArtifactRepository

    interface InformationRepository {
        Iterable<Information> findByStatus(long statusId)
        Iterable<Information> findByAcceptedUser(long userId)
        Iterable<Information> findByCreatedUser(long userId)
        Iterable<Information> findAllNotAccepted()
    }
    Models.Information <.. InformationRepository

    interface NotificationRepository {
        Iterable<User> findByUserId(long userId)
    }

    Models.Notification <.. NotificationRepository

    interface OrderRepository {
        Iterable<Order> findByCreatedUserId(long userId)
        Iterable<Order> findByAssignedUserId(long userId)
        Iterable<Order> findByAcceptedUserId(long userId)
        Iterable<Order> findOrderByStatus(long statusId)
        Iterable<Order> findSuggestedOrders(long userId)
    }
    Models.Order <.. OrderRepository

    interface UserRepository {
        Optional<User> findByEmail(String email)
        Iterable<User> findByRole(String role)
    }
    Models.User <.. UserRepository
}




package Models {

    class Artifact {
        Long id
        String name
        double price
    }
    
    class Information {
        Long id
        String title
        String description
        String information
        Double price
        Date creationDate
        Long createdUserId
        Long acceptedUserId
        Long statusId
    }
    
    class Notification {
        Long id
        String message
        boolean wasRead
        Long userId
        Long orderId
    }
    
    class Order {
        Long id
        Artifact artifact
        Long artifactId
        Double price
        Date completionDate
        User createdUser
        Long createdUserId
        User acceptedUser
        Long acceptedUserId
        User assignedUser
        Long assignedUserId
        User suggestedUser
        Long suggestedUserId
        OrderStatus status
        Long statusId
    }

    
    class OrderStatus{
        Long id
        String name
    }
    
    class User{
        Long id
        String email
        String firstName
        String lastName
        String middleName
        String nickname
        String role
        String passwordHash
    }

    Order "1" o--> "0..*" User
    Order "1" o--> "0..*" OrderStatus
    Order "1" o--> "0..*" Artifact
   
    Information "1" o--> "0..*" User
    
    Notification "1" o--> "0..*" User
    Notification "1" o--> "0..*" Order

    

}

package Controllers {
    class ArtifactController {
        ArtifactRepository artifactRepository
        ResponseEntity<Iterable<ArtifactResponse>> getArtifacts()
    }
    Repository.ArtifactRepository <--* ArtifactController

    class AuthController {
        UserRepository userRepository
        ResponseEntity<AuthResponse> register(RegisterRequest request)
        ResponseEntity<AuthResponse> login(LoginRequest request)
    }
    Repository.UserRepository <--* AuthController

    class InformationController {
        InformationRepository infoRepository
        UserRepository userRepository 

        ResponseEntity<InformationResponse> createInformation(CreateInformationRequest request)
        ResponseEntity<Iterable<InformationResponse>> getAvailableList()
        ResponseEntity<Iterable<InformationResponse>> getInformationList()
        ResponseEntity<InformationResponse> getInformation(Long id)
        ResponseEntity<InformationResponse> buyInformation(Long id)
    }
    Repository.InformationRepository <--* InformationController
    Repository.UserRepository <--* InformationController


    class NotificationController {
        NotificationRepository notificationRepository
        ResponseEntity<Iterable<NotificationResponse>> getNotifications()       
    }
    Repository.NotificationRepository <--* NotificationController
    
    class OrdersController {
        OrderRepository orderRepository
        UserRepository userRepository
        NotificationRepository notificationRepository

        ResponseEntity<OrderResponse> suggestOrder(SuggestOrderRequest request)
        ResponseEntity<OrderResponse> declineOrder(long id)
        ResponseEntity<OrderResponse> acceptOrder(long id)
        ResponseEntity<OrderResponse> createOrder(CreateOrderRequest request)
        ResponseEntity<Iterable<OrderResponse>> getOrderList()
        ResponseEntity<OrderResponse> getOrder(Long id)
        ResponseEntity<Iterable<OrderResponse>> getAvailableOrders()
    }
    Repository.OrderRepository <--* OrdersController
    Repository.UserRepository <--* OrdersController
    Repository.NotificationRepository <--* OrdersController

    class RoleController {
        ResponseEntity getAllRoles()
    }

    class UserController {
        UserRepository userRepository

        ResponseEntity<UserResponse> getUserDetails()
        ResponseEntity<Iterable<UserResponse>> getAllStalkers()
    }
    Repository.UserRepository <--* UserController
   
}

package Requests {

}

package Responses {

}


Requests <.. Controllers
Responses <.. Controllers



@enduml


